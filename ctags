--fields=+l
--verbose=no
--recurse=yes
--tag-relative=yes
--sort=yes
--langdef=Scala
--langmap=Scala:.scala
--regex-Scala=/^[^\*\/]*import[ \t]*([a-zA-Z0-9_{}., \t=>]+$)/\1/i,includes/
--regex-Scala=/^[^\*\/]*package[ \t]*([a-zA-Z0-9_.]+$)/\1/p,packages/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\4/c,classes/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*object[ \t]*([a-zA-Z0-9_]+)/\4/o,objects/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*trait[ \t]*([a-zA-Z0-9_]+)/\4/t,traits/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\4/C,case classes/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case[ \t]*class[ \t]*([a-zA-Z0-9_]+)/\4/O,case objects/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*def[ \t]*([a-zA-Z0-9_]+)[ \t]*.*[:=]/\3/m,methods/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*val[ \t]*([a-zA-Z0-9_]+)[ \t]*[:=]/\3/V,values/
--regex-Scala=/^[^\*\/]*((abstract|final|sealed|implicit|lazy)[ \t]*)*var[ \t]*([a-zA-Z0-9_]+)[ \t]*[:=]/\3/v,variables/
--regex-Scala=/^[^\*\/]*type[ \t]*([a-zA-Z0-9_]+)[ \t]*[\[<>=]/\1/T,types/
--regex-Scala=/(TODO)/\1/d,todo/

--regex-ruby=/(^|[:;])[ \t]*([A-Z][[:alnum:]_]+) *=/\2/c,class,constant/
--regex-ruby=/(^|;)[ \t]*(has_many|belongs_to|has_one|has_and_belongs_to_many)\(? *:([[:alnum:]_]+)/\3/f,function,association/
--regex-ruby=/(^|;)[ \t]*(named_)?scope\(? *:([[:alnum:]_]+)/\3/f,function,named_scope/
--regex-ruby=/(^|;)[ \t]*expose\(? *:([[:alnum:]_]+)/\2/f,function,exposure/
--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2/f,function,aasm_event/
--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2!/f,function,aasm_event/
--regex-ruby=/(^|;)[ \t]*event\(? *:([[:alnum:]_]+)/\2?/f,function,aasm_event/

--langdef=markdown
--langmap=markdown:.md.markdown.mdown.mkd.mkdn
--regex-markdown=/^#[ \t]+(.*)/\1/h,heading1/
--regex-markdown=/^##[ \t]+(.*)/\1/h,heading2/
--regex-markdown=/^###[ \t]+(.*)/\1/h,heading3/
--regex-markdown=/^####[ \t]+(.*)/\1/h,heading4/
--regex-markdown=/^#####[ \t]+(.*)/\1/h,heading5/
--regex-markdown=/^######[ \t]+(.*)/\1/h,heading6/

--langdef=js
--langmap=js:.js
--regex-js=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\{/\1/,object/
--regex-js=/([A-Za-z0-9._$()]+)[ \t]*[:=][ \t]*function[ \t]*\(/\1/,function/
--regex-js=/function[ \t]+([A-Za-z0-9._$]+)[ \t]*\(([^)])\)/\1/,function/
--regex-js=/([A-Za-z0-9._$]+)[ \t]*[:=][ \t]*\[/\1/,array/
--regex-js=/([^= ]+)[ \t]*=[ \t]*[^"]'[^']*/\1/,string/
--regex-js=/([^= ]+)[ \t]*=[ \t]*[^']"[^"]*/\1/,string/

--exclude=.git
--exclude=log
--exclude=.git

--langdef=Go
--langmap=Go:.go
--regex-Go=/func([ \t]+\([^)]+\))?[ \t]+([a-zA-Z0-9_]+)/\2/f,func/
--regex-Go=/var[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/v,var/
--regex-Go=/type[ \t]+([a-zA-Z_][a-zA-Z0-9_]+)/\1/t,type/

