"-----------------------------------------------"
" Author:       Tim Sæterøy                     "
" Homepage:     http://thevoid.no               "
" Source:       http://github.com/timss/vimconf "
"-----------------------------------------------"

" vimconf is not vi-compatible
set nocompatible


""" Automatically make needed files and folders on first run
""" If you don't run *nix you're on your own (as in remove this) {{{
    call system("mkdir -p $HOME/.vim/{plugin,undo}")
    if !filereadable($HOME . "/.vimrc.bundles") | call system("touch $HOME/.vimrc.bundles") | endif
    if !filereadable($HOME . "/.vimrc.first") | call system("touch $HOME/.vimrc.first") | endif
    if !filereadable($HOME . "/.vimrc.last") | call system("touch $HOME/.vimrc.last") | endif
""" }}}
""" Vundle plugin manager {{{
    """ Automatically setting up Vundle, taken from
    """ http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/ {{{
        let has_vundle=1
        if !filereadable($HOME."/.vim/bundle/vundle/README.md")
            echo "Installing Vundle..."
            echo ""
            silent !mkdir -p $HOME/.vim/bundle
            silent !git clone https://github.com/gmarik/vundle $HOME/.vim/bundle/vundle
            let has_vundle=0
        endif
    """ }}}
    """ Initialize Vundle {{{
        filetype off                                " required to init
        set rtp+=$HOME/.vim/bundle/vundle/          " include vundle
        call vundle#rc()                            " init vundle
    """ }}}
    """ Github repos, uncomment to disable a plugin {{{
    " Recursive vundle, omg!
    Bundle 'gmarik/vundle'

    """ Local bundles (and only bundles in this file!) {{{{
    if filereadable($HOME."/.vimrc.bundles")
        source $HOME/.vimrc.bundles
    endif
    """ }}}

    " Edit files using sudo/su
    Bundle 'chrisbra/SudoEdit.vim'

    " Fuzzy finder (files, mru, etc)
    Bundle 'kien/ctrlp.vim'

    " A pretty statusline, bufferline integration
    Bundle 'itchyny/lightline.vim'
    "Bundle 'bling/vim-airline'
    Bundle 'bling/vim-bufferline'

    " Close all other buffers but this one
    Bundle 'duff/vim-bufonly'

    " tmux integration
    Bundle 'benmills/vimux'
    Bundle 'christoomey/vim-tmux-navigator'

    " Glorious colorschemes
    Bundle 'nanotech/jellybeans.vim'
    Bundle 'jnurmine/Zenburn'
    "Bundle 'jaromero/vim-monokai-refined'

    " Work with colors
    Bundle 'guns/xterm-color-table.vim'
    Bundle 'lilydjwg/colorizer'


    " Super easy commenting, toggle comments etc
    Bundle 'scrooloose/nerdcommenter'

    " Autoclose (, " etc
    Bundle 'tpope/vim-unimpaired'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-repeat'
    "Bundle 'Townk/vim-autoclose'

    " Git wrapper inside Vim
    Bundle 'tpope/vim-fugitive'
    Bundle "airblade/vim-gitgutter"

    " Align your = etc.
    Bundle 'vim-scripts/Align'

    " Snippets like textmate
    Bundle "Valloric/YouCompleteMe"
    Bundle 'SirVer/ultisnips'
    Bundle 'honza/vim-snippets'

    Bundle "scrooloose/nerdtree"
    Bundle "bufexplorer.zip"
    "Bundle "koron/minimap-vim"

    " Awesome syntax checker.
    " REQUIREMENTS: See :h syntastic-intro
    Bundle 'scrooloose/syntastic'

    " Functions, class data etc.
    " REQUIREMENTS: (exuberant)-ctags
    Bundle 'majutsushi/tagbar'
    Bundle 'mtth/scratch.vim'

    " Scala support
    Bundle 'derekwyatt/vim-scala'
    Bundle 'derekwyatt/vim-sbt'
    Bundle 'ktvoelker/sbt-vim'
    Bundle "tpope/vim-classpath"
    Bundle "GEverding/vim-hocon"

    " Ansible support
    Bundle 'chase/vim-ansible-yaml'

    " Docker support
    Bundle "ekalinin/Dockerfile.vim"

    " Vagrant support
    Bundle "markcornick/vim-vagrant"
    
    " NGinX support
    Bundle 'evanmiller/nginx-vim-syntax'

    " Varnish cache support
    " Bundle "casualjim/vim-varnish"

    " Go support
    Bundle "fatih/vim-go"
    Bundle 'benmills/vimux-golang'

    " JavaScript
    Bundle "mklabs/grunt.vim"
    Bundle "moll/vim-node"
    Bundle "pangloss/vim-javascript"
    Bundle "othree/javascript-libraries-syntax.vim"
    Bundle "matthewsimo/angular-vim-snippets"
    Bundle "burnettk/vim-angular"
    Bundle "myhere/vim-nodejs-complete"
    "Bundle "elzr/vim-json"
    
    """ }}}
    """ Installing plugins the first time {{{
        if has_vundle == 0
            echo "Installing Bundles, please ignore key map error messages"
            echo ""
            :BundleInstall
        endif
    """ }}}
""" }}}
""" Local leading config, only use for prerequisites as it will be
""" overwritten by anything below {{{{
    if filereadable($HOME."/.vimrc.first")
        source $HOME/.vimrc.first
    endif
""" }}}
""" User interface {{{
    """ Syntax highlighting {{{
        filetype plugin indent on                   " detect file plugin+indent
        syntax on                                   " syntax highlighting
        set t_Co=256                                " 256-colors
        set background=dark                         " we're using a dark bg
        colors jellybeans                           " select colorscheme
        colors desertEx                             " select colorscheme
        "colors zenburn                             " select colorscheme
        au BufNewFile,BufRead *.txt se ft=sh tw=119  " opens .txt w/highlight
        au BufNewFile,BufRead *.tex se ft=tex tw=119 " we don't want plaintex
        au BufNewFile,BufRead *.md se ft=markdown tw=119 " markdown, not modula
        "au VimEnter * RainbowParenthesesToggle
        "au Syntax * RainbowParenthesesLoadRound
        "au Syntax * RainbowParenthesesLoadSquare
        "au Syntax * RainbowParenthesesLoadBraces
        """ Tab colors, overwritten by lightline(?) {{{
            "hi TabLineFill ctermfg=NONE ctermbg=233
            "hi TabLine ctermfg=241 ctermbg=233
            "hi TabLineSel ctermfg=250 ctermbg=233
        """ }}}
        """ Custom highlighting, where NONE uses terminal background {{{
            function! CustomHighlighting()
                highlight Normal ctermbg=NONE
                highlight nonText ctermbg=NONE
                highlight LineNr ctermbg=NONE
                highlight SignColumn ctermbg=NONE
                highlight CursorLine ctermbg=235
            endfunction

            call CustomHighlighting()
        """ }}}
    """ }}}
    """ Interface general {{{
        set cursorline                              " hilight cursor line
        set more                                    " ---more--- like less
        set number                                  " line numbers
        set scrolloff=3                             " lines above/below cursor
        set showcmd                                 " show cmds being typed
        set title                                   " window title
        set vb t_vb=                                " disable beep and flashing
        set wildignore+=.hg,.git,.svn " Version Controls"
        set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
        set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
        set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.a,*.so,*.dylib "Compiled Object files"
        set wildignore+=*.spl "Compiled speolling world list"
        set wildignore+=*.sw? "Vim swap files"
        set wildignore+=*.DS_Store "OSX SHIT"
        set wildignore+=*.luac "Lua byte code"
        set wildignore+=migrations "Django migrations"
        set wildignore+=*.pyc "Python Object codes"
        set wildignore+=*.orig "Merge resolution files"
        set wildignore+=*.pdf,*.mkv "No video files
        set wildignore+=*.class "java/scala class files"
        set wildignore+=*.bak " Backup files
        set wildmenu                                " better auto complete
        set wildmode=longest,list                   " bash-like auto complete
        """ Encoding {{{
            " If you're having problems with some characters you can force
            " UTF-8 if your locale is something else.
            " WARNING: this will affect encoding used when editing files!
            "
        set encoding=utf-8                    " for character glyphs
        """ }}}
        """ Gvim {{{
            set guifont="Consolas Regular 13"
            if has("gui_mac") || has("gui_macvim") 
              set guifont=Consolas:h13
            endif
            if has("gui_win32") || has("gui_win32s") 
              set guifont=Consolas:h10
              set enc=utf-8
            endif
            "set guioptions-=m                       " remove menubar
            set guioptions-=T                       " remove toolbar
            set guioptions-=r                       " remove right scrollbar
        """ }}}
    """ }}}
""" }}}
""" General settings {{{
    set hidden                                      " buffer change, more undo
    set history=1000                                " default 20
    set iskeyword+=_,$,@,%,#                        " not word dividers
    set laststatus=2                                " always show statusline
    set linebreak                                   " don't cut words on wrap
    set listchars=tab:>\                            " > to highlight <tab>
    set list                                        " displaying listchars
    set mouse=a                                     " disable mouse
    set nolist                                      " wraps to whole words
    set noshowmode                                  " hide mode cmd line
    set noexrc                                      " don't use other .*rc(s)
    set nostartofline                               " keep cursor column pos
    set nowrap                                      " don't wrap lines
    set numberwidth=5                               " 99999 lines
    set shortmess+=I                                " disable startup message
    set splitbelow                                  " splits go below w/focus
    set splitright                                  " vsplits go right w/focus
    set ttyfast                                     " for faster redraws etc
    set ttymouse=xterm2                             " experimental
    """ Folding {{{
        set foldcolumn=0                            " hide folding column
        set foldmethod=indent                       " folds using indent
        set foldnestmax=10                          " max 10 nested folds
        set foldlevelstart=99                       " folds open by default
    """ }}}
    """ Search and replace {{{
        set gdefault                                " default s//g (global)
        set incsearch                               " "live"-search
    """ }}}
    """ Matching {{{
        set matchtime=2                             " time to blink match {}
        set matchpairs+=<:>                         " for ci< or ci>
        set showmatch                               " tmpjump to match-bracket
    """ }}}
    """ Return to last edit position when opening files {{{
        autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \     exe "normal! g`\"" |
            \ endif
    """ }}}
""" }}}
""" Files {{{
    " set autochdir                                   " always use curr. dir.
    set autoread                                    " refresh if changed
    set confirm                                     " confirm changed files
    set noautowrite                                 " never autowrite
    set nobackup                                    " disable backups
    set updatecount=50                              " update swp after 50chars
    """ Persistent undo. Requires Vim 7.3 {{{
        if has('persistent_undo') && exists("&undodir")
            set undodir=$HOME/.vim/undo/            " where to store undofiles
            set undofile                            " enable undofile
            set undolevels=500                      " max undos stored
            set undoreload=10000                    " buffer stored undos
        endif
    """ }}}
""" }}}
""" Text formatting {{{
    set autoindent                                  " preserve indentation
    set backspace=indent,eol,start                  " smart backspace
    set cinkeys-=0#                                 " don't force # indentation
    set expandtab                                   " no real tabs
    set ignorecase                                  " by default ignore case
    set nrformats+=alpha                            " incr/decr letters C-a/-x
    set shiftround                                  " be clever with tabs
    set shiftwidth=2                                " default 8
    set smartcase                                   " sensitive with uppercase
    set smarttab                                    " tab to 0,4,8 etc.
    set softtabstop=2                               " "tab" feels like <tab>
    set tabstop=2                                   " replace <TAB> w/4 spaces
    """ Only auto-comment newline for block comments {{{
        au FileType c,cpp setlocal comments -=:// comments +=f://

    " http://stackoverflow.com/questions/16743112/open-item-from-quickfix-window-in-vertical-split
    autocmd! FileType qf nnoremap <buffer> <leader><Enter> <C-w><Enter><C-w>L
    "don't clutter my directories with swap files, bitch!
    set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
    set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
 

    """ }}}
""" }}}
""" Keybindings {{{
    """ General {{{
        " Remap <leader>
        let mapleader=","

        " Quickly edit/source .vimrc
        noremap <leader>ve :edit $HOME/.vimrc<CR>
        noremap <leader>vs :source $HOME/.vimrc<CR>

        " Yank(copy) to system clipboard
        noremap <leader>y "+y

        " Toggle text wrapping
        nmap <silent> <leader>w :set invwrap<CR>:set wrap?<CR>

        " Toggle folding
        nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
        vnoremap <Space> zf

        " Bubbling (bracket matching)
        nmap <C-up> [e
        nmap <C-down> ]e
        vmap <C-up> [egv
        vmap <C-down> ]egv

        " Move faster
        map <C-j> <C-d>
        map <C-k> <C-u>

        " Treat wrapped lines as normal lines
        nnoremap j gj
        nnoremap k gk

        " Working ci(, works for both breaklined, inline and multiple ()
        nnoremap ci( %ci(

        " We don't need any help!
        inoremap <F1> <nop>
        nnoremap <F1> <nop>
        vnoremap <F1> <nop>

        " Disable annoying ex mode (Q)
        map Q <nop>

        " Buffers, preferred over tabs now with bufferline. Buggy?
        nnoremap gn :bNext<CR>
        nnoremap gN :bprevious<CR>
        nnoremap gd :bdelete<CR>
        nnoremap gf <C-^>

        nmap <silent> <F2> :NERDTreeToggle<CR>
        nnoremap <silent> <C-L> :noh<CR><C-L>
    """ }}}
    """ Functions or fancy binds {{{{
        """ Toggle syntax highlighting {{{
            function! ToggleSyntaxHighlighthing()
                if exists("g:syntax_on")
                    syntax off
                else
                    syntax on
                    call CustomHighlighting()
                endif
            endfunction

            nnoremap <leader>s :call ToggleSyntaxHighlighthing()<CR>
        """ }}}
        """ Highlight characters past 119, toggle with <leader>h
        """ You might want to override this function and its variables with
        """ your own in .vimrc.last which might set for example colorcolumn or
        """ even the textwidth. See https://github.com/timss/vimconf/pull/4 {{{
            let g:overlength_enabled = 0
            highlight OverLength ctermbg=238 guibg=#444444

            function! ToggleOverLength()
                if g:overlength_enabled == 0
                    match OverLength /\%119v.*/
                    let g:overlength_enabled = 1
                    echo 'OverLength highlighting turned on'
                else
                    match
                    let g:overlength_enabled = 0
                    echo 'OverLength highlighting turned off'
                endif
            endfunction

            nnoremap <leader>h :call ToggleOverLength()<CR>
        """ }}}
        """ Toggle relativenumber using <leader>r {{{
            nnoremap <leader>r :call NumberToggle()<CR>

            function! NumberToggle()
                if(&relativenumber == 1)
                    set number
                else
                    set relativenumber
                endif
            endfunction
        """ }}}
        """ Remove multiple empty lines {{{
            function! DeleteMultipleEmptyLines()
                g/^\_$\n\_^$/d
            endfunction

            nnoremap <leader>ld :call DeleteMultipleEmptyLines()<CR>
        """ }}}
        """ Split to relative header/source {{{
            function! SplitRelSrc()
                let s:fname = expand("%:t:r")

                if expand("%:e") == "h"
                    set nosplitright
                    exe "vsplit" fnameescape(s:fname . ".cpp")
                    set splitright
                elseif expand("%:e") == "cpp"
                    exe "vsplit" fnameescape(s:fname . ".h")
                endif
            endfunction

            nnoremap <leader>le :call SplitRelSrc()<CR>
        """ }}}
        """ Strip trailing whitespace, return to cursors at save {{{
            function! <SID>StripTrailingWhitespace()
                let l = line(".")
                let c = col(".")
                %s/\s\+$//e
                call cursor(l, c)
            endfunction

            autocmd FileType c,cpp,css,html,perl,python,sh autocmd 
                        \BufWritePre <buffer> :call <SID>StripTrailingWhitespace()
        """ }}}
    """ }}}
    """ Plugins {{{
        " Toggle tagbar (definitions, functions etc.)
        map <F1> :TagbarToggle<CR>

        " Toggle pastemode, doesn't indent
        set pastetoggle=<F3>

        " Syntastic - toggle error list. Probably should be toggleable.
        noremap <silent><leader>lo :Errors<CR>
        noremap <silent><leader>lc :lcl<CR>
    """ }}}
""" }}}
""" Plugin settings {{{
    """ Lightline {{{
        let g:lightline = {
            \ 'colorscheme': 'jellybeans',
            \ 'active': {
            \     'left': [
            \         ['mode', 'paste'],
            \         ['fugitive', 'readonly'],
            \         ['ctrlpmark', 'bufferline']
            \     ],
            \     'right': [
            \         ['lineinfo'],
            \         ['percent'],
            \         ['fileformat', 'fileencoding', 'filetype', 'syntastic']
            \     ]
            \ },
            \ 'component': {
            \     'paste': '%{&paste?"!":""}'
            \ },
            \ 'component_function': {
            \     'mode'         : 'MyMode',
            \     'fugitive'     : 'MyFugitive',
            \     'readonly'     : 'MyReadonly',
            \     'ctrlpmark'    : 'CtrlPMark',
            \     'bufferline'   : 'MyBufferline',
            \     'fileformat'   : 'MyFileformat',
            \     'fileencoding' : 'MyFileencoding',
            \     'filetype'     : 'MyFiletype'
            \ },
            \ 'component_expand': {
            \     'syntastic': 'SyntasticStatuslineFlag',
            \ },
            \ 'component_type': {
            \     'syntastic': 'middle',
            \ },
            \ 'subseparator': {
            \     'left': '|', 'right': '|'
            \ }
            \ }

        let g:lightline.mode_map = {
            \ 'n'      : ' N ',
            \ 'i'      : ' I ',
            \ 'R'      : ' R ',
            \ 'v'      : ' V ',
            \ 'V'      : 'V-L',
            \ 'c'      : ' C ',
            \ "\<C-v>" : 'V-B',
            \ 's'      : ' S ',
            \ 'S'      : 'S-L',
            \ "\<C-s>" : 'S-B',
            \ '?'      : '      ' }

        function! MyMode()
            let fname = expand('%:t')
            return fname == '__Tagbar__' ? 'Tagbar' :
                    \ fname == 'ControlP' ? 'CtrlP' :
                    \ winwidth('.') > 60 ? lightline#mode() : ''
        endfunction

        function! MyFugitive()
            try
                if expand('%:t') !~? 'Tagbar' && exists('*fugitive#head')
                    let mark = '± '
                    let _ = fugitive#head()
                    return strlen(_) ? mark._ : ''
                endif
            catch
            endtry
            return ''
        endfunction

        function! MyReadonly()
            return &ft !~? 'help' && &readonly ? '≠' : '' " or ⭤
        endfunction

        function! CtrlPMark()
            if expand('%:t') =~ 'ControlP'
                call lightline#link('iR'[g:lightline.ctrlp_regex])
                return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
                    \ , g:lightline.ctrlp_next], 0)
            else
                return ''
            endif
        endfunction

        function! MyBufferline()
            call bufferline#refresh_status()
            let b = g:bufferline_status_info.before
            let c = g:bufferline_status_info.current
            let a = g:bufferline_status_info.after
            let alen = strlen(a)
            let blen = strlen(b)
        let clen = strlen(c)
            let w = winwidth(0) * 4 / 11
            if w < alen+blen+clen
                let whalf = (w - strlen(c)) / 2
                let aa = alen > whalf && blen > whalf ? a[:whalf] : alen + blen < w - clen || alen < whalf ? a : a[:(w - clen - blen)]
                let bb = alen > whalf && blen > whalf ? b[-(whalf):] : alen + blen < w - clen || blen < whalf ? b : b[-(w - clen - alen):]
                return (strlen(bb) < strlen(b) ? '...' : '') . bb . c . aa . (strlen(aa) < strlen(a) ? '...' : '')
            else
                return b . c . a
            endif
        endfunction

        function! MyFileformat()
            return winwidth('.') > 90 ? &fileformat : ''
        endfunction

        function! MyFileencoding()
            return winwidth('.') > 80 ? (strlen(&fenc) ? &fenc : &enc) : ''
        endfunction

        function! MyFiletype()
            return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
        endfunction

        let g:ctrlp_status_func = {
            \ 'main': 'CtrlPStatusFunc_1',
            \ 'prog': 'CtrlPStatusFunc_2',
            \ }

        function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
            let g:lightline.ctrlp_regex = a:regex
            let g:lightline.ctrlp_prev = a:prev
            let g:lightline.ctrlp_item = a:item
            let g:lightline.ctrlp_next = a:next
            return lightline#statusline(0)
        endfunction

        function! CtrlPStatusFunc_2(str)
            return lightline#statusline(0)
        endfunction

        let g:tagbar_status_func = 'TagbarStatusFunc'

        function! TagbarStatusFunc(current, sort, fname, ...) abort
            let g:lightline.fname = a:fname
            return lightline#statusline(0)
        endfunction

        augroup AutoSyntastic
            autocmd!
            autocmd BufWritePost *.c,*.cpp,*.perl,*py,*.scala call s:syntastic()
        augroup END
        function! s:syntastic()
            SyntasticCheck
            call lightline#update()
        endfunction
    """ }}}

    " CtrlP - don't recalculate files on start (slow)
    let g:ctrlp_clear_cache_on_exit = 1
    let g:ctrlp_working_path_mode = 'ra' 
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
        \ 'fallback': 'find %s -type f'
        \ }
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn)$',
        \ 'file': '\v\.(exe|so|dll|class|a)$',
        \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
        \ }
    let g:ctrlp_root_markers = ['.ctrlp']

    " TagBar
    let g:tagbar_left = 0
    let g:tagbar_width = 30
    set tags=./tags;/

    " Scala {{{3
    let g:tagbar_type_scala = {
        \ 'ctagstype': 'scala',
        \ 'kinds': [
            \ {'short' : 'p', 'long' : 'packages',       'fold' : 1, 'stl' : 0},
            \ {'short' : 'i', 'long' : 'includes',       'fold' : 1, 'stl' : 0},
            \ {'short' : 'c', 'long' : 'classes',        'fold' : 0, 'stl' : 1},
            \ {'short' : 't', 'long' : 'traits', 'fold' : 0, 'stl' : 1},
            \ {'short' : 'o', 'long' : 'objects',        'fold' : 0, 'stl' : 1},
            \ {'short' : 'C', 'long' : 'case classes',        'fold' : 0, 'stl' : 1},
            \ {'short' : 'O', 'long' : 'case objects',        'fold' : 0, 'stl' : 1},
            \ {'short' : 'm', 'long' : 'methods',      'fold' : 0, 'stl' : 1},
            \ {'short' : 'V', 'long' : 'values',      'fold' : 0, 'stl' : 0},
            \ {'short' : 'v', 'long' : 'variables',      'fold' : 0, 'stl' : 0},
            \ {'short' : 'T', 'long' : 'types',      'fold' : 0, 'stl' : 0}
        \ ],
        \ 'sro': '.',
        \ 'kind2scope': {  
            \ 't' : 'trait',
            \ 'o' : 'object',
            \ 'C' : 'case class',
            \ 'O' : 'case object',
            \ 'c' : 'class'
        \ },
        \ 'scope2kind': {
            \ 'trait'          : 't',
            \ 'object'         : 'o',
            \ 'case class'     : 'C',
            \ 'case object'    : 'O',
            \ 'class'          : 'c'
        \ }
    \ }

    " define the go language tags
    " assumes you have 
    " make use of the gotags tool: https://github.com/jstemmer/gotags
    " cd $GOPATH
    " go get -u github.com/jstemmer/gotags
    " 
    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }

    " Syntastic - This is largely up to your own usage, and override these
    "             changes if be needed. This is merely an exemplification.
    let g:syntastic_cpp_check_header = 1
    let g:syntastic_cpp_compiler_options = ' -std=c++0x'
    let g:syntastic_mode_map = {
        \ 'mode': 'passive',
        \ 'active_filetypes':
            \ ['c', 'cpp', 'perl', 'python', 'scala', 'go', 'js'] }

    let g:go_bin_path = expand("$GOPATH/bin")
    let g:go_disable_autoinstall = 0
    let g:go_fmt_command = "goimports"

    let g:go_highlight_operators = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1

    "function! g:UltiSnips_Complete()
      "call UltiSnips_ExpandSnippet()
      "if g:ulti_expand_res == 0
          "if pumvisible()
              "return "\<C-n>"
          "else
              "call UltiSnips_JumpForwards()
              "if g:ulti_jump_forwards_res == 0
                "return "\<TAB>"
              "endif
          "endif
      "endif
      "return ""
    "endfunction

    "au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
    "let g:UltiSnipsJumpForwardTrigger="<tab>"
    "let g:UltiSnipsListSnippets="<c-e>"

    function! g:UltiSnips_Complete()
        call UltiSnips#ExpandSnippet()
        if g:ulti_expand_res == 0
            if pumvisible()
                return "\<C-n>"
            else
                call UltiSnips#JumpForwards()
                if g:ulti_jump_forwards_res == 0
                   return "\<TAB>"
                endif
            endif
        endif
        return ""
    endfunction

    au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
    let g:UltiSnipsExpandTrigger="<s-tab>"
    let g:UltiSnipsListSnippets="<c-e>"
    " this mapping Enter key to <C-y> to chose the current highlight item 
    " and close the selection list, same as other IDEs.
    " CONFLICT with some plugins like tpope/Endwise
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    let g:angular_find_ignore = ['build/', 'dist/']
    iabbrev </ </<C-X><C-O>
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
    au FileType go nmap <Leader>s <Plug>(go-implements)
    au FileType go nmap <Leader>i <Plug>(go-info)
    au FileType go nmap <Leader>gd <Plug>(go-doc)
    au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
    au FileType go nmap <Leader>e <Plug>(go-rename)
    au Filetype go nnoremap <leader>v :vsp <CR>:exe "GoDef" <CR>
    au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>
    au Filetype go nnoremap <leader>t :tab split <CR>:exe "GoDef"<CR>
    au FileType go nmap <leader>r <Plug>(go-run)
    au FileType go nmap <leader>t <Plug>(go-test)
    au FileType go nmap <leader>b <Plug>(go-build)
    au FileType go map <leader>ra :wa<CR> :GolangTestCurrentPackage<CR>
    au FileType go map <leader>rf :wa<CR> :GolangTestFocussed<CR>

""" }}}
""" Local ending config, will overwrite anything above. Generally use this. {{{{
    if filereadable($HOME."/.vimrc.last")
        source $HOME/.vimrc.last
    endif
""" }}}
